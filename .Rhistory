abline(h=0, lty=2, col="grey")
plot(rx, dfbeta(glm1)[,1])
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial,
data=byss[byss$Total!=0,])
summary(glm1)
BIC(glm1)
AIC(glm1, k=log(72))
AIC(glm1, k=log(65))
# remove rows which have no total
byss = byss[byss$Total!=0]
# remove rows which have no total
byss = byss[byss$Total!=0,]
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial,
data=byss)
summary(glm1)
BIC(glm1)
result1 = step(glm(cbind(Byssinosis, Non.Byssinosis)~1, binomial, byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result1)
BIC(result1)
#glm1
ry = residuals(glm1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "glm1",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
#result1
ry = residuals(result1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "result1",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
# all terms, no interactions, no size adjustments
glm2 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace,
family=poisson,
data=byss)
summary(glm2)
BIC(glm2)
# all terms, no interactions, w/ size adjustments
glm3 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace + offset(log(Total)),
family=poisson,
data=byss)
summary(glm3)
BIC(glm3)
result2 = step(glm(Byssinosis~offset(log(Total)), poisson, byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result2)
BIC(result2)
byss = read.csv("./Dataset/Byssinosis.csv")
head(byss)
# change Workspace to factor
byss$Workspace = factor(byss$Workspace, levels = c("3", "2", "1"))
# add Total column equal to Byssinosis + Non.Byssinosis
byss$Total = byss$Byssinosis + byss$Non.Byssinosis
# unique values of each predictor variable
sapply(byss[1:5], function(x) unique(x))
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial,
data=byss)
summary(glm1)
BIC(glm1)
# remove rows which have no total
byss = byss[byss$Total!=0,]
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial,
data=byss)
summary(glm1)
BIC(glm1)
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial,
data=byss)
summary(glm1)
BIC(glm1)
confint.default(glm1)
result1 = step(glm(cbind(Byssinosis, Non.Byssinosis)~1, binomial, byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result1)
BIC(result1)
confint.default(result1)
# all terms, no interactions, no size adjustments
glm2 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace,
family=poisson,
data=byss)
summary(glm2)
BIC(glm2)
confint.default(glm2)
# all terms, no interactions, w/ size adjustments
glm3 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace + offset(log(Total)),
family=poisson,
data=byss)
summary(glm3)
BIC(glm3)
confint.default(glm3)
result2 = step(glm(Byssinosis~offset(log(Total)), poisson, byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result2)
BIC(result2)
confint.default(result2)
?logLik
knitr::opts_chunk$set(echo = TRUE)
byss = read.csv("./Dataset/Byssinosis.csv")
head(byss)
# change Workspace to factor
byss$Workspace = factor(byss$Workspace, levels = c("3", "2", "1"))
# add Total column equal to Byssinosis + Non.Byssinosis
byss$Total = byss$Byssinosis + byss$Non.Byssinosis
# remove rows which have no total
byss = byss[byss$Total!=0,]
# unique values of each predictor variable
sapply(byss[1:5], function(x) unique(x))
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial(),
data=byss)
summary(glm1)
BIC(glm1)
confint.default(glm1)
# step-wise regression
result1 = step(glm(cbind(Byssinosis, Non.Byssinosis)~1, binomial(), byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result1)
BIC(result1)
confint.default(result1)
# glm1
ry = residuals(glm1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "glm1",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
# result1
ry = residuals(result1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "result1",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
# all terms, no interactions, no size adjustments
glm2 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace,
family=poisson(),
data=byss)
summary(glm2)
BIC(glm2)
confint.default(glm2)
# all terms, no interactions, w/ size adjustments
glm3 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace + offset(log(Total)),
family=poisson(),
data=byss)
summary(glm3)
BIC(glm3)
confint.default(glm3)
# step-wise regression
result2 = step(glm(Byssinosis~offset(log(Total)), poisson(), byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result2)
BIC(result2)
confint.default(result2)
knitr::opts_chunk$set(echo = TRUE)
logistic <- plogis
logit <- qlogis
n <- 100 # sample size
x <- sort(-2*runif(n)+1) # x ~ Uniform(-1,1)
y1 <- rbinom(n, 1, logistic(1 - 3*x)) # model 1 # linear relationship
y2 <- rbinom(n, 1, logistic(1 - 2*x + 4*x^2)) # model 2 # non-linear relationship
plot(x, 1 - 3*x,
type="l",
ylab = "log-odds",
main="Model 1")
plot(x, 1 - 2*x + 4*x^2,
type="l",
ylab = "log-odds",
main="Model 2")
# GLM fits a linear model
# only y1 is actually linear
fitted1 <- glm( y1 ~ x, family = binomial)
fitted2 <- glm( y2 ~ x, family = binomial)
ry <- residuals(fitted1, type="deviance")
rx <- logit(fitted.values(fitted1))
plot(rx, ry,
xlab="fitted log-odds",
ylab="deviance residual")
scatter.smooth(rx, ry,
xlab="fitted log-odds",
ylab="deviance residual",
main="data 1",
col='gray')
ry <- residuals(fitted2, type="deviance")
rx <- logit(fitted.values(fitted2))
scatter.smooth(rx, ry,
xlab="fitted log-odds",
ylab="deviance residual")
scatter.smooth(rx, ry,
xlab="fitted log-odds",
ylab="deviance residual",
main="data 2",
col='gray')
vars <- c("ID","CHD","CAT","AGE","CHL","SMK","ECG","DBP","SBP","HPT","CH","CC")
evans <-  read.table("http://anson.ucdavis.edu/~affarris/evans.dat",
col.names=vars)
summary(glm(CHD~CAT + SMK + HPT, binomial, evans))
# counts the frequency of each possible combination of the predictor variables for each value of the response variable
evansWide <- aggregate(cbind(CHD=CHD,notCHD=1-CHD,total=1)~CAT+SMK+HPT,
FUN=sum,
data=evans) # long to wide data
evansWide
fitGrouped <- glm(cbind(CHD,notCHD) ~ CAT + SMK + HPT,
family = binomial,
data = evansWide)
summary(fitGrouped)
# checking deviance residuals for new model
ry <- residuals(fitGrouped, type="deviance")
rx <- logit(fitted.values(fitGrouped))
plot(rx, ry,
xlab="fitted log-odds",
ylab="deviance residual")
abline(h=0, lty=2, col='red')
# the group which is fitted the worst
evansWide[ry > 2,]
# adding an interaction term
fitGroupedPlus <- glm(cbind(CHD,notCHD) ~ CAT + SMK + HPT + CAT:HPT,
family = binomial,
data = evansWide)
summary(fitGroupedPlus)
ry <- residuals(fitGroupedPlus, type="deviance")
rx <- logit(fitted.values(fitGroupedPlus))
plot(rx, ry,
xlab="fitted log-odds",
ylab="deviance residual")
abline(h=0, lty=2, col='red')
# dffits measures how much these fitted values would change if you remove one and refit the data
# want these values to be small
# can look for values with high influence, i.e., will have large impact if removed
plot(rx, dffits(fitGroupedPlus),
xlab="fitted log-odds",
ylab="dffits")
abline(h=0, lty=2, col='red')
# how much do our estimates change when we remove an estimate one at a time
plot(rx, dfbeta(fitGroupedPlus)[,1],
xlab="fitted log-odds",
ylab=expression(paste("dfbeta:  ",beta[0]))
)
abline(h=0, lty=2, col='red')
plot(rx, dfbeta(fitGroupedPlus)[,2],
xlab="fitted log-odds",
ylab=expression(paste("dfbeta:  ",beta[1]))
)
abline(h=0, lty=2, col='red')
plot(rx, dfbeta(fitGroupedPlus)[,3],
xlab="fitted log-odds",
ylab=expression(paste("dfbeta:  ",beta[2]))
)
abline(h=0, lty=2, col='red')
plot(rx, dfbeta(fitGroupedPlus)[,4],
xlab="fitted log-odds",
ylab=expression(paste("dfbeta:  ",beta[3]))
)
abline(h=0, lty=2, col='red')
plot(rx, dfbeta(fitGroupedPlus)[,5],
xlab="fitted log-odds",
ylab=expression(paste("dfbeta:  ",beta[5]))
)
abline(h=0, lty=2, col='red')
predict(fitted1, x)
predict(fitted1, data.frame(x))
logistic(predict(fitted1, data.frame(x)))
phat = logistic(predict(fitted1, data.frame(x)))
log(phat^y1 * (1-phat)^(1-y1))
rx
ry <- residuals(fitted1, type="deviance")
rx <- logit(fitted.values(fitted1))
rx
phat = logistic(predict(fitted1, data.frame(x)))
phat
ry
phat = logistic(predict(fitted1, data.frame(x)))
log(phat^y1 * (1-phat)^(1-y1))
ry
?log
fitted1$coefficients
fitted1$coefficients * c(1, 1)
fitted1$coefficients %*% c(1, 2)
fitted1$coefficients %*% x
fitted1$coefficients %*% data.frame(x)
dim(x)
class(x)
x
fitted1$coefficients %*% c(1, -0.954649672)
predict(fitted1, data.frame(x))
phat = logistc(predict(fitted1, data.frame(x)))
phat = logistic(predict(fitted1, data.frame(x)))
phat
phat = logistic(predict(fitted1, data.frame(x)))
log((phat^y1) * (1-phat)^(1-y1))
phat = logistic(predict(fitted1, data.frame(x)))
dr = log((phat^y1) * (1-phat)^(1-y1))
phat = logistic(predict(fitted1, data.frame(x)))
dr = log((phat^y1) * (1-phat)^(1-y1))
sort(dr)
sort(ry)
ry <- residuals(fitted1, type="deviance")
rx <- logit(fitted.values(fitted1))
sort(ry)
(phat^y1) * (1-phat)^(1-y1)
ry <- residuals(fitted1, type="deviance")
rx <- logit(fitted.values(fitted1))
fitted1$residuals
?resid
?residuals
residuals(fitted1)
rx
ry
residuals(fitted1)
quantile(ry)
predict(fitted1, type="response")
phat = predict(fitted1, type="repsonse")
phat = predict(fitted1, type="response")
phat = predict(fitted1, type="response")
-2*(y1*log(phat) + (1-y1)*log(1-phat))
phat = predict(fitted1, type="response")
sign(y1-phat)*(-2*(y1*log(phat) + (1-y1)*log(1-phat)))^0.5
ry
phat = predict(fitted1, type="response")
dev_res = sign(y1-phat)*(-2*(y1*log(phat) + (1-y1)*log(1-phat)))^0.5
plot(fitted1)
?plot
?plot.glm
logit(ry)
rx
?fitted.values
fitted.values(fitted1)
rx
phat
phat
predict(fitted1, type="repsonse")
predict(fitted1, type="response")
predict(fitted1)
rx
?ceiling
?celing(y1-phat)
apply(y1-phat, ceiling)
apply(y1-phat, ceiling())
apply(y1-phat, FUN=ceiling())
sapply((y1-phat), FUN=ceiling())
?sapply
y1-phat
sapply(phat, FUN=ceiling)
sapply(y1-phat, FUN=ceiling)
y1-phat
# glm1
ry = residuals(glm1, type="deviance")
knitr::opts_chunk$set(echo = TRUE)
byss = read.csv("./Dataset/Byssinosis.csv")
head(byss)
# change Workspace to factor
byss$Workspace = factor(byss$Workspace, levels = c("3", "2", "1"))
# add Total column equal to Byssinosis + Non.Byssinosis
byss$Total = byss$Byssinosis + byss$Non.Byssinosis
# remove rows which have no total
byss = byss[byss$Total!=0,]
# unique values of each predictor variable
sapply(byss[1:5], function(x) unique(x))
# all terms, no interactions
glm1 = glm(cbind(Byssinosis, Non.Byssinosis)~Employment + Smoking + Sex + Race + Workspace,
family=binomial(),
data=byss)
summary(glm1)
BIC(glm1)
confint.default(glm1)
# step-wise regression
result1 = step(glm(cbind(Byssinosis, Non.Byssinosis)~1, binomial(), byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result1)
BIC(result1)
confint.default(result1)
# glm1
ry = residuals(glm1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "Full Additive Model, No Interaction Terms",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
# result1
ry = residuals(result1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "Forward Step-Wise Regression Model",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
# all terms, no interactions, no size adjustments
glm2 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace,
family=poisson(),
data=byss)
summary(glm2)
BIC(glm2)
confint.default(glm2)
# all terms, no interactions, w/ size adjustments
glm3 = glm(Byssinosis~Employment + Smoking + Sex + Race + Workspace + offset(log(Total)),
family=poisson(),
data=byss)
summary(glm3)
BIC(glm3)
confint.default(glm3)
# step-wise regression
result2 = step(glm(Byssinosis~offset(log(Total)), poisson(), byss),
scope = ~Employment*Smoking*Sex*Race*Workspace,
k=log(72),
trace=0,
direction="forward")
summary(result2)
BIC(result2)
confint.default(result2)
?loess.smooth
# result1
ry = residuals(result1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "Forward Step-Wise Regression Model",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
loess.smooth(rx, ry)
# glm1
ry = residuals(glm1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "Full Additive Model, No Interaction Terms",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
loess.smooth(rx, ry)
# result1
ry = residuals(result1, type="deviance")
rx = qlogis(fitted.values(glm1))
plot(rx, ry,
xlab = "Fitted Log-Odds",
ylab = "Deviance Residual",
main = "Forward Step-Wise Regression Model",
col = "black")
lines(loess.smooth(rx, ry), col="red")
abline(h=0, lty=2, col="grey")
loess.smooth(rx, ry)
anova(glm1, result1)
anova(result1, glm1)
test = anova(result1,glm1)
1-pchisq(anova(result1, glm1)[2, 4],2)
?anova
anova(result1, glm1)
anv = anova(result1, glm1)
1-pchisq(anova(myGlm20, myGlm2)[2, 4],2)
anv
anv[2, 4]
anc[2,3]
anv[2,3]
anv = anova(result1, glm1)
pvalue = 1-pchisq(anv[2, 4], anv[2,3])
pvalue
anv
summary(anv)
anv
-2 * (logLik(result1) - logLik(glm1))
